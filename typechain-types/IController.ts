/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IControllerInterface extends utils.Interface {
  contractName: "IController";
  functions: {
    "beforeBorrow(address,address,uint256)": FunctionFragment;
    "beforeDeposit(address,address,uint256)": FunctionFragment;
    "beforeRepay(address,address,uint256)": FunctionFragment;
    "beforeWithdraw(address,address,uint256)": FunctionFragment;
    "dyTokenVaults(address)": FunctionFragment;
    "dyTokens(address)": FunctionFragment;
    "exitVault(address,bool)": FunctionFragment;
    "getValueConf(address)": FunctionFragment;
    "getValueConfs(address,address)": FunctionFragment;
    "joinVault(address,bool)": FunctionFragment;
    "strategies(address)": FunctionFragment;
    "userValues(address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "beforeBorrow",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeDeposit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeRepay",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeWithdraw",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dyTokenVaults",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "dyTokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "exitVault",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getValueConf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getValueConfs",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "joinVault",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "strategies", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userValues",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "beforeBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dyTokenVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dyTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getValueConf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValueConfs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userValues", data: BytesLike): Result;

  events: {};
}

export interface IController extends BaseContract {
  contractName: "IController";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    beforeBorrow(
      _borrower: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    beforeDeposit(
      arg0: string,
      _vault: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    beforeRepay(
      _repayer: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    beforeWithdraw(
      _redeemer: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    dyTokenVaults(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    dyTokens(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    exitVault(
      _user: string,
      isDeposit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getValueConf(
      _underlying: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & { oracle: string; dr: number; pr: number }
    >;

    getValueConfs(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, string, number, number] & {
        oracle0: string;
        dr0: number;
        pr0: number;
        oracle1: string;
        dr1: number;
        pr1: number;
      }
    >;

    joinVault(
      _user: string,
      isDeposit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    userValues(
      _user: string,
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalDepositValue: BigNumber;
        totalBorrowValue: BigNumber;
      }
    >;
  };

  beforeBorrow(
    _borrower: string,
    _vault: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  beforeDeposit(
    arg0: string,
    _vault: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  beforeRepay(
    _repayer: string,
    _vault: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  beforeWithdraw(
    _redeemer: string,
    _vault: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  dyTokenVaults(arg0: string, overrides?: CallOverrides): Promise<string>;

  dyTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

  exitVault(
    _user: string,
    isDeposit: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getValueConf(
    _underlying: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number] & { oracle: string; dr: number; pr: number }
  >;

  getValueConfs(
    token0: string,
    token1: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, string, number, number] & {
      oracle0: string;
      dr0: number;
      pr0: number;
      oracle1: string;
      dr1: number;
      pr1: number;
    }
  >;

  joinVault(
    _user: string,
    isDeposit: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategies(arg0: string, overrides?: CallOverrides): Promise<string>;

  userValues(
    _user: string,
    _dp: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalDepositValue: BigNumber;
      totalBorrowValue: BigNumber;
    }
  >;

  callStatic: {
    beforeBorrow(
      _borrower: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeDeposit(
      arg0: string,
      _vault: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeRepay(
      _repayer: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeWithdraw(
      _redeemer: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dyTokenVaults(arg0: string, overrides?: CallOverrides): Promise<string>;

    dyTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

    exitVault(
      _user: string,
      isDeposit: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getValueConf(
      _underlying: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & { oracle: string; dr: number; pr: number }
    >;

    getValueConfs(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, string, number, number] & {
        oracle0: string;
        dr0: number;
        pr0: number;
        oracle1: string;
        dr1: number;
        pr1: number;
      }
    >;

    joinVault(
      _user: string,
      isDeposit: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<string>;

    userValues(
      _user: string,
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalDepositValue: BigNumber;
        totalBorrowValue: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    beforeBorrow(
      _borrower: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeDeposit(
      arg0: string,
      _vault: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeRepay(
      _repayer: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeWithdraw(
      _redeemer: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dyTokenVaults(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    dyTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    exitVault(
      _user: string,
      isDeposit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getValueConf(
      _underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueConfs(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinVault(
      _user: string,
      isDeposit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userValues(
      _user: string,
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    beforeBorrow(
      _borrower: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeDeposit(
      arg0: string,
      _vault: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeRepay(
      _repayer: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeWithdraw(
      _redeemer: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dyTokenVaults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dyTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exitVault(
      _user: string,
      isDeposit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getValueConf(
      _underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValueConfs(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinVault(
      _user: string,
      isDeposit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userValues(
      _user: string,
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
