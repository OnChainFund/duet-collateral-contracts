/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SingleFarmingVaultInterface extends utils.Interface {
  contractName: "SingleFarmingVault";
  functions: {
    "PercentBase()": FunctionFragment;
    "controller()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "depositTo(address,address,uint256)": FunctionFragment;
    "deposits(address)": FunctionFragment;
    "farm()": FunctionFragment;
    "feeConf()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "isDuetVault()": FunctionFragment;
    "liquidate(address,address,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingValue(address,int256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAppController(address)": FunctionFragment;
    "setFeeConf(address)": FunctionFragment;
    "setVaultFarm(address)": FunctionFragment;
    "syncDeposit(address,uint256,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "underlying()": FunctionFragment;
    "underlyingAmountValue(uint256,bool)": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "userValue(address,bool)": FunctionFragment;
    "withdraw(uint256,bool)": FunctionFragment;
    "withdrawTo(address,uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "PercentBase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTo",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposits", values: [string]): string;
  encodeFunctionData(functionFragment: "farm", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeConf", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isDuetVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingValue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAppController",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setFeeConf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setVaultFarm",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "syncDeposit",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAmountValue",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userValue",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "PercentBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeConf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDuetVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAppController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeConf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVaultFarm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAmountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;

  events: {
    "ControllerChanged(address)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "FarmChanged(address)": EventFragment;
    "FeeConfChanged(address)": EventFragment;
    "Liquidated(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ControllerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FarmChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeConfChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type ControllerChangedEvent = TypedEvent<
  [string],
  { controller: string }
>;

export type ControllerChangedEventFilter =
  TypedEventFilter<ControllerChangedEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber],
  { supplyer: string; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type FarmChangedEvent = TypedEvent<[string], { farm: string }>;

export type FarmChangedEventFilter = TypedEventFilter<FarmChangedEvent>;

export type FeeConfChangedEvent = TypedEvent<[string], { feeconf: string }>;

export type FeeConfChangedEventFilter = TypedEventFilter<FeeConfChangedEvent>;

export type LiquidatedEvent = TypedEvent<
  [string, string, BigNumber],
  { liquidator: string; borrower: string; supplies: BigNumber }
>;

export type LiquidatedEventFilter = TypedEventFilter<LiquidatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  { redeemer: string; amount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface SingleFarmingVault extends BaseContract {
  contractName: "SingleFarmingVault";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SingleFarmingVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PercentBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      dytoken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositTo(
      dytoken: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    farm(overrides?: CallOverrides): Promise<[string]>;

    feeConf(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _controller: string,
      _feeConf: string,
      _underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isDuetVault(overrides?: CallOverrides): Promise<[boolean]>;

    liquidate(
      liquidator: string,
      borrower: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingValue(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAppController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeConf(
      _feeConf: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVaultFarm(
      _farm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    syncDeposit(
      dytoken: string,
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    underlyingAmountValue(
      _amount: BigNumberish,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    userValue(
      user: string,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      amount: BigNumberish,
      unpack: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTo(
      to: string,
      amount: BigNumberish,
      unpack: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  PercentBase(overrides?: CallOverrides): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  deposit(
    dytoken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositTo(
    dytoken: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  farm(overrides?: CallOverrides): Promise<string>;

  feeConf(overrides?: CallOverrides): Promise<string>;

  initialize(
    _controller: string,
    _feeConf: string,
    _underlying: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isDuetVault(overrides?: CallOverrides): Promise<boolean>;

  liquidate(
    liquidator: string,
    borrower: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingValue(
    user: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAppController(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeConf(
    _feeConf: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVaultFarm(
    _farm: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  syncDeposit(
    dytoken: string,
    amount: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  underlyingAmountValue(
    _amount: BigNumberish,
    dp: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  userValue(
    user: string,
    dp: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    unpack: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTo(
    to: string,
    amount: BigNumberish,
    unpack: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PercentBase(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    deposit(
      dytoken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositTo(
      dytoken: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    farm(overrides?: CallOverrides): Promise<string>;

    feeConf(overrides?: CallOverrides): Promise<string>;

    initialize(
      _controller: string,
      _feeConf: string,
      _underlying: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isDuetVault(overrides?: CallOverrides): Promise<boolean>;

    liquidate(
      liquidator: string,
      borrower: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingValue(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAppController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeConf(_feeConf: string, overrides?: CallOverrides): Promise<void>;

    setVaultFarm(_farm: string, overrides?: CallOverrides): Promise<void>;

    syncDeposit(
      dytoken: string,
      amount: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    underlying(overrides?: CallOverrides): Promise<string>;

    underlyingAmountValue(
      _amount: BigNumberish,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    userValue(
      user: string,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      unpack: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTo(
      to: string,
      amount: BigNumberish,
      unpack: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ControllerChanged(address)"(
      controller?: null
    ): ControllerChangedEventFilter;
    ControllerChanged(controller?: null): ControllerChangedEventFilter;

    "Deposit(address,uint256)"(
      supplyer?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(supplyer?: string | null, amount?: null): DepositEventFilter;

    "FarmChanged(address)"(farm?: null): FarmChangedEventFilter;
    FarmChanged(farm?: null): FarmChangedEventFilter;

    "FeeConfChanged(address)"(feeconf?: null): FeeConfChangedEventFilter;
    FeeConfChanged(feeconf?: null): FeeConfChangedEventFilter;

    "Liquidated(address,address,uint256)"(
      liquidator?: string | null,
      borrower?: string | null,
      supplies?: null
    ): LiquidatedEventFilter;
    Liquidated(
      liquidator?: string | null,
      borrower?: string | null,
      supplies?: null
    ): LiquidatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Withdraw(address,uint256)"(
      redeemer?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(redeemer?: string | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    PercentBase(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      dytoken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositTo(
      dytoken: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    farm(overrides?: CallOverrides): Promise<BigNumber>;

    feeConf(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _controller: string,
      _feeConf: string,
      _underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isDuetVault(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      liquidator: string,
      borrower: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingValue(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAppController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeConf(
      _feeConf: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVaultFarm(
      _farm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    syncDeposit(
      dytoken: string,
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingAmountValue(
      _amount: BigNumberish,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    userValue(
      user: string,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      unpack: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTo(
      to: string,
      amount: BigNumberish,
      unpack: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PercentBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      dytoken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositTo(
      dytoken: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeConf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _controller: string,
      _feeConf: string,
      _underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isDuetVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      liquidator: string,
      borrower: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingValue(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAppController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeConf(
      _feeConf: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVaultFarm(
      _farm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    syncDeposit(
      dytoken: string,
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingAmountValue(
      _amount: BigNumberish,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userValue(
      user: string,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      unpack: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTo(
      to: string,
      amount: BigNumberish,
      unpack: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
