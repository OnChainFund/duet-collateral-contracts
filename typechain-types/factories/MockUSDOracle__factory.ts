/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockUSDOracle, MockUSDOracleInterface } from "../MockUSDOracle";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61031d8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100565760003560e01c8062e4768b1461005b57806341976e0914610087578063715018a6146100c35780638da5cb5b146100cb578063f2fde38b146100e6575b600080fd5b61008561006936600461029b565b6001600160a01b03909116600090815260016020526040902055565b005b6100b06100953660046102c5565b6001600160a01b031660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6100856100f9565b6000546040516001600160a01b0390911681526020016100ba565b6100856100f43660046102c5565b610164565b6000546001600160a01b031633146101585760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b610162600061022f565b565b6000546001600160a01b031633146101be5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161014f565b6001600160a01b0381166102235760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161014f565b61022c8161022f565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461029657600080fd5b919050565b600080604083850312156102ae57600080fd5b6102b78361027f565b946020939093013593505050565b6000602082840312156102d757600080fd5b6102e08261027f565b939250505056fea2646970667358221220e775bca1e031f64ff716e896fceaf682deb28157377c861568a33ec15cb34df264736f6c63430008090033";

type MockUSDOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUSDOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUSDOracle__factory extends ContractFactory {
  constructor(...args: MockUSDOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockUSDOracle";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockUSDOracle> {
    return super.deploy(overrides || {}) as Promise<MockUSDOracle>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockUSDOracle {
    return super.attach(address) as MockUSDOracle;
  }
  connect(signer: Signer): MockUSDOracle__factory {
    return super.connect(signer) as MockUSDOracle__factory;
  }
  static readonly contractName: "MockUSDOracle";
  public readonly contractName: "MockUSDOracle";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUSDOracleInterface {
    return new utils.Interface(_abi) as MockUSDOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockUSDOracle {
    return new Contract(address, _abi, signerOrProvider) as MockUSDOracle;
  }
}
