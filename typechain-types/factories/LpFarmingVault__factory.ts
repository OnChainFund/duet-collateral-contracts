/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LpFarmingVault,
  LpFarmingVaultInterface,
} from "../LpFarmingVault";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "controller",
        type: "address",
      },
    ],
    name: "ControllerChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "supplyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "farm",
        type: "address",
      },
    ],
    name: "FarmChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "feeconf",
        type: "address",
      },
    ],
    name: "FeeConfChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "liquidator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "borrower",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "supplies",
        type: "uint256",
      },
    ],
    name: "Liquidated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "redeemer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "PercentBase",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "controller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dtoken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dtoken",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "deposits",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "farm",
    outputs: [
      {
        internalType: "contract IVaultFarm",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feeConf",
    outputs: [
      {
        internalType: "contract IFeeConf",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_controller",
        type: "address",
      },
      {
        internalType: "address",
        name: "_feeConf",
        type: "address",
      },
      {
        internalType: "address",
        name: "_underlying",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isDuetVault",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "liquidator",
        type: "address",
      },
      {
        internalType: "address",
        name: "borrower",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "liquidate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pair",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "int256",
        name: "amount",
        type: "int256",
      },
    ],
    name: "pendingValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_controller",
        type: "address",
      },
    ],
    name: "setAppController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_feeConf",
        type: "address",
      },
    ],
    name: "setFeeConf",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_farm",
        type: "address",
      },
    ],
    name: "setVaultFarm",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dtoken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "syncDeposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token0",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "underlying",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "dp",
        type: "bool",
      },
    ],
    name: "underlyingAmountValue",
    outputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "bool",
        name: "dp",
        type: "bool",
      },
    ],
    name: "userValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "unpack",
        type: "bool",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "unpack",
        type: "bool",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061256a806100206000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638da5cb5b116100de578063c0c53b8b11610097578063f213159c11610071578063f213159c14610347578063f2fde38b1461035a578063f77c47911461036d578063fc7e286d1461038057600080fd5b8063c0c53b8b1461030e578063d21220a714610321578063eb1cc3ba1461033457600080fd5b80638da5cb5b146102ac578063a0d9d1d9146102bd578063a8aa1b31146102d0578063ae318c4d146102e3578063b9eefa69146102f6578063ba58591c146102ff57600080fd5b80635ac28bf91161014b578063715018a611610125578063715018a61461026b57806373e2290c1461027357806374eb83c114610286578063877c8cd11461029957600080fd5b80635ac28bf9146102325780636695535c146102455780636f307dc31461025857600080fd5b80630dfe1681146101935780631a6d413e146101c35780631db44b8e146101d857806336e9332d146101f957806338d074361461020c57806347e7ef241461021f575b600080fd5b609d546101a6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101d66101d1366004611e02565b6103a0565b005b6101eb6101e6366004611e2d565b61046d565b6040519081526020016101ba565b609a546101a6906001600160a01b031681565b6101d661021a366004611e2d565b6108c1565b6101d661022d366004611e5d565b6108d0565b6101eb610240366004611e5d565b610911565b6101d6610253366004611e02565b610981565b6097546101a6906001600160a01b031681565b6101d6610a41565b6101d6610281366004611e89565b610a77565b6101d6610294366004611ecb565b610a87565b6099546101a6906001600160a01b031681565b6033546001600160a01b03166101a6565b6101d66102cb366004611e02565b610a99565b609c546101a6906001600160a01b031681565b6101eb6102f1366004611f5d565b610b5c565b6101eb61271081565b604051600181526020016101ba565b6101d661031c366004611f8b565b610bab565b609f546101a6906001600160a01b031681565b6101d6610342366004611fcb565b610f34565b6101d6610355366004612002565b61104a565b6101d6610368366004611e02565b61108b565b6098546101a6906001600160a01b031681565b6101eb61038e366004611e02565b609b6020526000908152604090205481565b6033546001600160a01b031633146103d35760405162461bcd60e51b81526004016103ca90612043565b60405180910390fd5b6001600160a01b0381166104185760405162461bcd60e51b815260206004820152600c60248201526b494e56414c49445f4641524d60a01b60448201526064016103ca565b609a80546001600160a01b0319166001600160a01b0383169081179091556040519081527fe8d79c9831b9b25abf1785ab7027993c1cca203c617c418d316776b3c980ec8a906020015b60405180910390a150565b60008261047c575060006108bb565b609c54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156104c157600080fd5b505afa1580156104d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f99190612078565b9050600080609c60009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561054c57600080fd5b505afa158015610560573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058491906120ad565b5060975460405163f755b39d60e01b8152600481018a90529294509092506000916001600160a01b039091169063f755b39d9060240160206040518083038186803b1580156105d257600080fd5b505afa1580156105e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060a9190612078565b9050600084610622836001600160701b038716612108565b61062c9190612127565b9050600085610644846001600160701b038716612108565b61064e9190612127565b609854609d54609f54604051633dcecc2f60e01b81526001600160a01b0392831660048201529082166024820152929350600092839283928392911690633dcecc2f9060440160c06040518083038186803b1580156106ac57600080fd5b505afa1580156106c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e4919061215b565b50609d546040516341976e0960e01b81526001600160a01b03918216600482015295995061ffff94851698509196509092169350600092918716916341976e09915060240160206040518083038186803b15801561074157600080fd5b505afa158015610755573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107799190612078565b609f546040516341976e0960e01b81526001600160a01b039182166004820152919250600091908516906341976e099060240160206040518083038186803b1580156107c457600080fd5b505afa1580156107d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fc9190612078565b90508d156108735760a05461271084610815848b612108565b61081f9190612108565b6108299190612127565b6108339190612127565b609e5461271087610844868d612108565b61084e9190612108565b6108589190612127565b6108629190612127565b61086c91906121d3565b9c506108ae565b60a0546108808289612108565b61088a9190612127565b609e54610897848b612108565b6108a19190612127565b6108ab91906121d3565b9c505b5050505050505050505050505b92915050565b6108cc338383611126565b5050565b6097546001600160a01b038381169116146108fd5760405162461bcd60e51b81526004016103ca906121eb565b6109073382611393565b6108cc33826113ab565b6000808212610950576001600160a01b0383166000908152609b6020526040902054610949906109429084906121d3565b600161046d565b90506108bb565b61094961095e836000612212565b6001600160a01b0385166000908152609b60205260409020546109429190612251565b6033546001600160a01b031633146109ab5760405162461bcd60e51b81526004016103ca90612043565b6001600160a01b0381166109f35760405162461bcd60e51b815260206004820152600f60248201526e24a72b20a624a22fa322a2a1a7a72360891b60448201526064016103ca565b609980546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f848457f88c295370f87d543957f8cfe46e0759b3a528ae233eb79885a2949d90602001610462565b6033546001600160a01b03163314610a6b5760405162461bcd60e51b81526004016103ca90612043565b610a75600061157c565b565b610a82838383611126565b505050565b610a93848484846115ce565b50505050565b6033546001600160a01b03163314610ac35760405162461bcd60e51b81526004016103ca90612043565b6001600160a01b038116610b0e5760405162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa1a7a72a2927a62622a960711b60448201526064016103ca565b609880546001600160a01b0319166001600160a01b0383169081179091556040519081527f027c3e080ed9215f564a9455a666f7e459b3edc0bb6e02a1bf842fde4d0ccfc190602001610462565b6001600160a01b0382166000908152609b6020526040812054610b81575060006108bb565b6001600160a01b0383166000908152609b6020526040902054610ba4908361046d565b9392505050565b600054610100900460ff16610bc65760005460ff1615610bca565b303b155b610c2d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103ca565b600054610100900460ff16158015610c4f576000805461ffff19166101011790555b610c5a84848461191c565b816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9357600080fd5b505afa158015610ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccb9190612268565b609c80546001600160a01b0319166001600160a01b0392909216918217905560408051630dfe168160e01b81529051630dfe168191600480820192602092909190829003018186803b158015610d2057600080fd5b505afa158015610d34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d589190612268565b609d80546001600160a01b0319166001600160a01b039290921691821790556040805163313ce56760e01b815290516000929163313ce567916004808301926020929190829003018186803b158015610db057600080fd5b505afa158015610dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de89190612285565b60ff169050610df881600a61238c565b609e55609c546040805163d21220a760e01b815290516001600160a01b039092169163d21220a791600480820192602092909190829003018186803b158015610e4057600080fd5b505afa158015610e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e789190612268565b609f80546001600160a01b0319166001600160a01b039290921691821790556040805163313ce56760e01b815290516000929163313ce567916004808301926020929190829003018186803b158015610ed057600080fd5b505afa158015610ee4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f089190612285565b60ff169050610f1881600a61238c565b60a05550508015610a93576000805461ff001916905550505050565b60985460405163083d576560e41b81526001600160a01b03858116600483015260009216906383d576509060240160206040518083038186803b158015610f7a57600080fd5b505afa158015610f8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb29190612268565b6097549091506001600160a01b031633148015610fdc57506097546001600160a01b038581169116145b610ff85760405162461bcd60e51b81526004016103ca906121eb565b6001600160a01b03811630146110405760405162461bcd60e51b815260206004820152600d60248201526c0ac82aa98a8beaa9c9a82a8869609b1b60448201526064016103ca565b610a9382846113ab565b6097546001600160a01b038481169116146110775760405162461bcd60e51b81526004016103ca906121eb565b6110813382611393565b610a8282826113ab565b6033546001600160a01b031633146110b55760405162461bcd60e51b81526004016103ca90612043565b6001600160a01b03811661111a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103ca565b6111238161157c565b50565b600260655414156111495760405162461bcd60e51b81526004016103ca90612398565b6002606555336000818152609b60205260409020548311156111a45760405162461bcd60e51b8152602060048201526014602482015273125394d551919250d251539517d1115413d4d25560621b60448201526064016103ca565b811561121c5760975460405163ead5d35960e01b81526001600160a01b03868116600483015260248201869052600160448301529091169063ead5d35990606401600060405180830381600087803b1580156111ff57600080fd5b505af1158015611213573d6000803e3d6000fd5b50505050611228565b61122884846000611963565b60985460405163015304d160e21b81526001600160a01b038381166004830152306024830152604482018690529091169063054c13449060640160006040518083038186803b15801561127a57600080fd5b505afa15801561128e573d6000803e3d6000fd5b505050506001600160a01b0381166000908152609b6020526040812080548592906112ba908490612251565b90915550506040518381526001600160a01b038216907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a2611306816119d9565b609a546001600160a01b03161561138857609a5460975460405163a66bd52160e01b81526001600160a01b03848116600483015260248201879052918216604482015291169063a66bd52190606401600060405180830381600087803b15801561136f57600080fd5b505af1158015611383573d6000803e3d6000fd5b505050505b505060016065555050565b6097546108cc906001600160a01b0316833084611aa0565b600260655414156113ce5760405162461bcd60e51b81526004016103ca90612398565b6002606555806114135760405162461bcd60e51b815260206004820152601060248201526f4445504f534954455f49535f5a45524f60801b60448201526064016103ca565b6098546040516309ba9b4760e01b81526001600160a01b03848116600483015230602483015260448201849052909116906309ba9b479060640160006040518083038186803b15801561146557600080fd5b505afa158015611479573d6000803e3d6000fd5b505050506001600160a01b0382166000908152609b6020526040812080548392906114a59084906121d3565b90915550506040518181526001600160a01b038316907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a26114f1826119d9565b609a546001600160a01b03161561157357609a5460975460405163758e61dd60e11b81526001600160a01b03858116600483015260248201859052918216604482015291169063eb1cc3ba90606401600060405180830381600087803b15801561155a57600080fd5b505af115801561156e573d6000803e3d6000fd5b505050505b50506001606555565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600260655414156115f15760405162461bcd60e51b81526004016103ca90612398565b60026065556098546001600160a01b031633146116505760405162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f494e56414c49445f43414c4c4552000000000000000060448201526064016103ca565b826001600160a01b0316846001600160a01b031614156116b25760405162461bcd60e51b815260206004820152601a60248201527f4c49515549444154455f44495341424c455f594f555253454c4600000000000060448201526064016103ca565b6001600160a01b0383166000908152609b6020526040902054801561183157609954604051636dd5b69d60e01b8152666c69715f66656560c81b6004820152829160009182916001600160a01b031690636dd5b69d90602401604080518083038186803b15801561172257600080fd5b505afa158015611736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175a91906123cf565b9150915060008111801561177657506001600160a01b03821615155b156117b057600061271061178a8387612108565b6117949190612127565b90506117a08185612251565b93506117ae83826001611963565b505b6117bc88846001611963565b841561182d57609754604051631d20dce760e01b81526001600160a01b03808b1692631d20dce7926117fa928c92169088908c908c906004016123fd565b600060405180830381600087803b15801561181457600080fd5b505af1158015611828573d6000803e3d6000fd5b505050505b5050505b6001600160a01b038085166000818152609b6020526040808220919091555190918716907fde0aa27286f5cb3a4ed853dc4823ead62d63e92cdf13de09d6aece56970721a4906118849085815260200190565b60405180910390a3611895846119d9565b609a546001600160a01b03161561191057609a546097546040516322211d1160e21b81526001600160a01b0387811660048301529182166024820152911690638884744490604401600060405180830381600087803b1580156118f757600080fd5b505af115801561190b573d6000803e3d6000fd5b505050505b50506001606555505050565b611924611b0b565b609880546001600160a01b039485166001600160a01b031991821617909155609980549385169382169390931790925560978054919093169116179055565b6001600160a01b03831630141561197957505050565b6001600160a01b0383166119c25760405162461bcd60e51b815260206004820152601060248201526f7265636569707420697320656d70747960801b60448201526064016103ca565b609754610a82906001600160a01b03168484611b3a565b6001600160a01b0381166000908152609b602052604090205460019015611a665760985460405163c4c0048760e01b81526001600160a01b03848116600483015283151560248301529091169063c4c00487906044015b600060405180830381600087803b158015611a4a57600080fd5b505af1158015611a5e573d6000803e3d6000fd5b505050505050565b6098546040516379bf27b160e01b81526001600160a01b0384811660048301528315156024830152909116906379bf27b190604401611a30565b6040516001600160a01b0380851660248301528316604482015260648101829052610a939085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611b6a565b600054610100900460ff16611b325760405162461bcd60e51b81526004016103ca90612451565b610a75611c3c565b6040516001600160a01b038316602482015260448101829052610a8290849063a9059cbb60e01b90606401611ad4565b6000611bbf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c6c9092919063ffffffff16565b805190915015610a825780806020019051810190611bdd919061249c565b610a825760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103ca565b600054610100900460ff16611c635760405162461bcd60e51b81526004016103ca90612451565b610a753361157c565b6060611c7b8484600085611c83565b949350505050565b606082471015611ce45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103ca565b6001600160a01b0385163b611d3b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103ca565b600080866001600160a01b03168587604051611d5791906124e5565b60006040518083038185875af1925050503d8060008114611d94576040519150601f19603f3d011682016040523d82523d6000602084013e611d99565b606091505b5091509150611da9828286611db4565b979650505050505050565b60608315611dc3575081610ba4565b825115611dd35782518084602001fd5b8160405162461bcd60e51b81526004016103ca9190612501565b6001600160a01b038116811461112357600080fd5b600060208284031215611e1457600080fd5b8135610ba481611ded565b801515811461112357600080fd5b60008060408385031215611e4057600080fd5b823591506020830135611e5281611e1f565b809150509250929050565b60008060408385031215611e7057600080fd5b8235611e7b81611ded565b946020939093013593505050565b600080600060608486031215611e9e57600080fd5b8335611ea981611ded565b9250602084013591506040840135611ec081611e1f565b809150509250925092565b60008060008060608587031215611ee157600080fd5b8435611eec81611ded565b93506020850135611efc81611ded565b9250604085013567ffffffffffffffff80821115611f1957600080fd5b818701915087601f830112611f2d57600080fd5b813581811115611f3c57600080fd5b886020828501011115611f4e57600080fd5b95989497505060200194505050565b60008060408385031215611f7057600080fd5b8235611f7b81611ded565b91506020830135611e5281611e1f565b600080600060608486031215611fa057600080fd5b8335611fab81611ded565b92506020840135611fbb81611ded565b91506040840135611ec081611ded565b600080600060608486031215611fe057600080fd5b8335611feb81611ded565b9250602084013591506040840135611ec081611ded565b60008060006060848603121561201757600080fd5b833561202281611ded565b9250602084013561203281611ded565b929592945050506040919091013590565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561208a57600080fd5b5051919050565b80516001600160701b03811681146120a857600080fd5b919050565b6000806000606084860312156120c257600080fd5b6120cb84612091565b92506120d960208501612091565b9150604084015163ffffffff81168114611ec057600080fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612122576121226120f2565b500290565b60008261214457634e487b7160e01b600052601260045260246000fd5b500490565b805161ffff811681146120a857600080fd5b60008060008060008060c0878903121561217457600080fd5b865161217f81611ded565b955061218d60208801612149565b945061219b60408801612149565b935060608701516121ab81611ded565b92506121b960808801612149565b91506121c760a08801612149565b90509295509295509295565b600082198211156121e6576121e66120f2565b500190565b6020808252600d908201526c0a89e968a9cbeaa9c9a82a8869609b1b604082015260600190565b60008083128015600160ff1b850184121615612230576122306120f2565b6001600160ff1b038401831381161561224b5761224b6120f2565b50500390565b600082821015612263576122636120f2565b500390565b60006020828403121561227a57600080fd5b8151610ba481611ded565b60006020828403121561229757600080fd5b815160ff81168114610ba457600080fd5b600181815b808511156122e35781600019048211156122c9576122c96120f2565b808516156122d657918102915b93841c93908002906122ad565b509250929050565b6000826122fa575060016108bb565b81612307575060006108bb565b816001811461231d576002811461232757612343565b60019150506108bb565b60ff841115612338576123386120f2565b50506001821b6108bb565b5060208310610133831016604e8410600b8410161715612366575081810a6108bb565b61237083836122a8565b8060001904821115612384576123846120f2565b029392505050565b6000610ba483836122eb565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600080604083850312156123e257600080fd5b82516123ed81611ded565b6020939093015192949293505050565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156124ae57600080fd5b8151610ba481611e1f565b60005b838110156124d45781810151838201526020016124bc565b83811115610a935750506000910152565b600082516124f78184602087016124b9565b9190910192915050565b60208152600082518060208401526125208160408501602087016124b9565b601f01601f1916919091016040019291505056fea2646970667358221220e4e6570201f488ecb4217a28a932b837bd5c6413aefd1d60c6a191a876dd853164736f6c63430008090033";

type LpFarmingVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LpFarmingVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LpFarmingVault__factory extends ContractFactory {
  constructor(...args: LpFarmingVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "LpFarmingVault";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LpFarmingVault> {
    return super.deploy(overrides || {}) as Promise<LpFarmingVault>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LpFarmingVault {
    return super.attach(address) as LpFarmingVault;
  }
  connect(signer: Signer): LpFarmingVault__factory {
    return super.connect(signer) as LpFarmingVault__factory;
  }
  static readonly contractName: "LpFarmingVault";
  public readonly contractName: "LpFarmingVault";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LpFarmingVaultInterface {
    return new utils.Interface(_abi) as LpFarmingVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LpFarmingVault {
    return new Contract(address, _abi, signerOrProvider) as LpFarmingVault;
  }
}
