/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Duet, DuetInterface } from "../Duet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnme",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611092806100206000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638129fc1c116100a2578063a457c2d711610071578063a457c2d714610227578063a9059cbb1461023a578063dd62ed3e1461024d578063e8795b3914610286578063f2fde38b1461029957600080fd5b80638129fc1c146101e95780638da5cb5b146101f157806395d89b411461020c5780639dc29fac1461021457600080fd5b8063313ce567116100e9578063313ce56714610181578063395093511461019057806340c10f19146101a357806370a08231146101b8578063715018a6146101e157600080fd5b806306fdde031461011b578063095ea7b31461013957806318160ddd1461015c57806323b872dd1461016e575b600080fd5b6101236102ac565b6040516101309190610e17565b60405180910390f35b61014c610147366004610e88565b61033e565b6040519015158152602001610130565b6067545b604051908152602001610130565b61014c61017c366004610eb2565b610356565b60405160128152602001610130565b61014c61019e366004610e88565b61037a565b6101b66101b1366004610e88565b6103b9565b005b6101606101c6366004610eee565b6001600160a01b031660009081526065602052604090205490565b6101b66103fa565b6101b6610430565b6033546040516001600160a01b039091168152602001610130565b61012361054c565b6101b6610222366004610e88565b61055b565b61014c610235366004610e88565b61058f565b61014c610248366004610e88565b610621565b61016061025b366004610f10565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205490565b6101b6610294366004610f43565b61062f565b6101b66102a7366004610eee565b610639565b6060606880546102bb90610f5c565b80601f01602080910402602001604051908101604052809291908181526020018280546102e790610f5c565b80156103345780601f1061030957610100808354040283529160200191610334565b820191906000526020600020905b81548152906001019060200180831161031757829003601f168201915b5050505050905090565b60003361034c8185856106d1565b5060019392505050565b6000336103648582856107f5565b61036f858585610887565b506001949350505050565b3360008181526066602090815260408083206001600160a01b038716845290915281205490919061034c90829086906103b4908790610fad565b6106d1565b6033546001600160a01b031633146103ec5760405162461bcd60e51b81526004016103e390610fc5565b60405180910390fd5b6103f68282610a55565b5050565b6033546001600160a01b031633146104245760405162461bcd60e51b81526004016103e390610fc5565b61042e6000610b34565b565b600054610100900460ff1661044b5760005460ff161561044f565b303b155b6104b25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103e3565b600054610100900460ff161580156104d4576000805461ffff19166101011790555b6104dc610b86565b6104e4610bad565b61053760405180604001604052806015815260200174223ab2ba1023b7bb32b93730b731b2902a37b5b2b760591b815250604051806040016040528060048152602001631115515560e21b815250610bdd565b8015610549576000805461ff00191690555b50565b6060606980546102bb90610f5c565b6033546001600160a01b031633146105855760405162461bcd60e51b81526004016103e390610fc5565b6103f68282610c30565b3360008181526066602090815260408083206001600160a01b0387168452909152812054909190838110156106145760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103e3565b61036f82868684036106d1565b60003361034c818585610887565b6105493382610c30565b6033546001600160a01b031633146106635760405162461bcd60e51b81526004016103e390610fc5565b6001600160a01b0381166106c85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103e3565b61054981610b34565b6001600160a01b0383166107335760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103e3565b6001600160a01b0382166107945760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103e3565b6001600160a01b0383811660008181526066602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03838116600090815260666020908152604080832093861683529290522054600019811461088157818110156108745760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103e3565b61088184848484036106d1565b50505050565b6001600160a01b0383166108eb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103e3565b6001600160a01b03821661094d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103e3565b6001600160a01b038316600090815260656020526040902054818110156109c55760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103e3565b6001600160a01b038085166000908152606560205260408082208585039055918516815290812080548492906109fc908490610fad565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a4891815260200190565b60405180910390a3610881565b6001600160a01b038216610aab5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103e3565b8060676000828254610abd9190610fad565b90915550506001600160a01b03821660009081526065602052604081208054839290610aea908490610fad565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661042e5760405162461bcd60e51b81526004016103e390610ffa565b600054610100900460ff16610bd45760405162461bcd60e51b81526004016103e390610ffa565b61042e33610b34565b600054610100900460ff16610c045760405162461bcd60e51b81526004016103e390610ffa565b8151610c17906068906020850190610d7e565b508051610c2b906069906020840190610d7e565b505050565b6001600160a01b038216610c905760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103e3565b6001600160a01b03821660009081526065602052604090205481811015610d045760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103e3565b6001600160a01b0383166000908152606560205260408120838303905560678054849290610d33908490611045565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b828054610d8a90610f5c565b90600052602060002090601f016020900481019282610dac5760008555610df2565b82601f10610dc557805160ff1916838001178555610df2565b82800160010185558215610df2579182015b82811115610df2578251825591602001919060010190610dd7565b50610dfe929150610e02565b5090565b5b80821115610dfe5760008155600101610e03565b600060208083528351808285015260005b81811015610e4457858101830151858201604001528201610e28565b81811115610e56576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610e8357600080fd5b919050565b60008060408385031215610e9b57600080fd5b610ea483610e6c565b946020939093013593505050565b600080600060608486031215610ec757600080fd5b610ed084610e6c565b9250610ede60208501610e6c565b9150604084013590509250925092565b600060208284031215610f0057600080fd5b610f0982610e6c565b9392505050565b60008060408385031215610f2357600080fd5b610f2c83610e6c565b9150610f3a60208401610e6c565b90509250929050565b600060208284031215610f5557600080fd5b5035919050565b600181811c90821680610f7057607f821691505b60208210811415610f9157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610fc057610fc0610f97565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008282101561105757611057610f97565b50039056fea2646970667358221220152c3be41e6e5b9df463657b4330c4c17f731447ddc738dd0a4c5180eff3417164736f6c63430008090033";

type DuetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DuetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Duet__factory extends ContractFactory {
  constructor(...args: DuetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Duet";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Duet> {
    return super.deploy(overrides || {}) as Promise<Duet>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Duet {
    return super.attach(address) as Duet;
  }
  connect(signer: Signer): Duet__factory {
    return super.connect(signer) as Duet__factory;
  }
  static readonly contractName: "Duet";
  public readonly contractName: "Duet";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DuetInterface {
    return new utils.Interface(_abi) as DuetInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Duet {
    return new Contract(address, _abi, signerOrProvider) as Duet;
  }
}
