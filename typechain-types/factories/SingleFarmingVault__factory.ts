/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SingleFarmingVault,
  SingleFarmingVaultInterface,
} from "../SingleFarmingVault";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "controller",
        type: "address",
      },
    ],
    name: "ControllerChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "supplyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "farm",
        type: "address",
      },
    ],
    name: "FarmChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "feeconf",
        type: "address",
      },
    ],
    name: "FeeConfChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "liquidator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "borrower",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "supplies",
        type: "uint256",
      },
    ],
    name: "Liquidated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "redeemer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "PercentBase",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "controller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dytoken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dytoken",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "deposits",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "farm",
    outputs: [
      {
        internalType: "contract IVaultFarm",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feeConf",
    outputs: [
      {
        internalType: "contract IFeeConf",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_controller",
        type: "address",
      },
      {
        internalType: "address",
        name: "_feeConf",
        type: "address",
      },
      {
        internalType: "address",
        name: "_underlying",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isDuetVault",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "liquidator",
        type: "address",
      },
      {
        internalType: "address",
        name: "borrower",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "liquidate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "int256",
        name: "amount",
        type: "int256",
      },
    ],
    name: "pendingValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_controller",
        type: "address",
      },
    ],
    name: "setAppController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_feeConf",
        type: "address",
      },
    ],
    name: "setFeeConf",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_farm",
        type: "address",
      },
    ],
    name: "setVaultFarm",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dytoken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "syncDeposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "underlying",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "dp",
        type: "bool",
      },
    ],
    name: "underlyingAmountValue",
    outputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "underlyingToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "bool",
        name: "dp",
        type: "bool",
      },
    ],
    name: "userValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "unpack",
        type: "bool",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "unpack",
        type: "bool",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50612082806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063877c8cd1116100c3578063c0c53b8b1161007c578063c0c53b8b146102c5578063eb1cc3ba146102d8578063f213159c146102eb578063f2fde38b146102fe578063f77c479114610311578063fc7e286d1461032457600080fd5b8063877c8cd1146102635780638da5cb5b14610276578063a0d9d1d914610287578063ae318c4d1461029a578063b9eefa69146102ad578063ba58591c146102b657600080fd5b80635ac28bf9116101155780635ac28bf9146101fc5780636695535c1461020f5780636f307dc314610222578063715018a61461023557806373e2290c1461023d57806374eb83c11461025057600080fd5b80631a6d413e1461015d5780631db44b8e146101725780632495a5991461019857806336e9332d146101c357806338d07436146101d657806347e7ef24146101e9575b600080fd5b61017061016b3660046119a9565b610344565b005b6101856101803660046119d4565b610411565b6040519081526020015b60405180910390f35b609c546101ab906001600160a01b031681565b6040516001600160a01b03909116815260200161018f565b609a546101ab906001600160a01b031681565b6101706101e43660046119d4565b610616565b6101706101f7366004611a04565b610625565b61018561020a366004611a04565b610666565b61017061021d3660046119a9565b6106d6565b6097546101ab906001600160a01b031681565b610170610796565b61017061024b366004611a30565b6107cc565b61017061025e366004611a72565b6107dc565b6099546101ab906001600160a01b031681565b6033546001600160a01b03166101ab565b6101706102953660046119a9565b6107ee565b6101856102a8366004611b04565b6108b1565b61018561271081565b6040516001815260200161018f565b6101706102d3366004611b32565b610900565b6101706102e6366004611b72565b610adb565b6101706102f9366004611ba9565b610bf1565b61017061030c3660046119a9565b610c32565b6098546101ab906001600160a01b031681565b6101856103323660046119a9565b609b6020526000908152604090205481565b6033546001600160a01b031633146103775760405162461bcd60e51b815260040161036e90611bea565b60405180910390fd5b6001600160a01b0381166103bc5760405162461bcd60e51b815260206004820152600c60248201526b494e56414c49445f4641524d60a01b604482015260640161036e565b609a80546001600160a01b0319166001600160a01b0383169081179091556040519081527fe8d79c9831b9b25abf1785ab7027993c1cca203c617c418d316776b3c980ec8a906020015b60405180910390a150565b60008261042057506000610610565b60975460405163f755b39d60e01b8152600481018590526000916001600160a01b03169063f755b39d9060240160206040518083038186803b15801561046557600080fd5b505afa158015610479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049d9190611c1f565b609854609c546040516306b3632760e21b81526001600160a01b03918216600482015292935060009283929190911690631acd8c9c9060240160606040518083038186803b1580156104ee57600080fd5b505afa158015610502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105269190611c4f565b50609c546040516341976e0960e01b81526001600160a01b03918216600482015292945061ffff919091169250600091908416906341976e099060240160206040518083038186803b15801561057b57600080fd5b505afa15801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b39190611c1f565b905085156105f157609d54612710836105cc8488611caa565b6105d69190611caa565b6105e09190611cc9565b6105ea9190611cc9565b945061060b565b609d546105fe8286611caa565b6106089190611cc9565b94505b505050505b92915050565b610621338383610ccd565b5050565b6097546001600160a01b038381169116146106525760405162461bcd60e51b815260040161036e90611ceb565b61065c3382610f3a565b6106213382610f52565b60008082126106a5576001600160a01b0383166000908152609b602052604090205461069e90610697908490611d12565b6001610411565b9050610610565b61069e6106b3836000611d2a565b6001600160a01b0385166000908152609b60205260409020546106979190611d69565b6033546001600160a01b031633146107005760405162461bcd60e51b815260040161036e90611bea565b6001600160a01b0381166107485760405162461bcd60e51b815260206004820152600f60248201526e24a72b20a624a22fa322a2a1a7a72360891b604482015260640161036e565b609980546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f848457f88c295370f87d543957f8cfe46e0759b3a528ae233eb79885a2949d90602001610406565b6033546001600160a01b031633146107c05760405162461bcd60e51b815260040161036e90611bea565b6107ca6000611123565b565b6107d7838383610ccd565b505050565b6107e884848484611175565b50505050565b6033546001600160a01b031633146108185760405162461bcd60e51b815260040161036e90611bea565b6001600160a01b0381166108635760405162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa1a7a72a2927a62622a960711b604482015260640161036e565b609880546001600160a01b0319166001600160a01b0383169081179091556040519081527f027c3e080ed9215f564a9455a666f7e459b3edc0bb6e02a1bf842fde4d0ccfc190602001610406565b6001600160a01b0382166000908152609b60205260408120546108d657506000610610565b6001600160a01b0383166000908152609b60205260409020546108f99083610411565b9392505050565b600054610100900460ff1661091b5760005460ff161561091f565b303b155b6109825760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161036e565b600054610100900460ff161580156109a4576000805461ffff19166101011790555b6109af8484846114c3565b816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e857600080fd5b505afa1580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a209190611d80565b609c80546001600160a01b0319166001600160a01b039290921691821790556040805163313ce56760e01b815290516000929163313ce567916004808301926020929190829003018186803b158015610a7857600080fd5b505afa158015610a8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab09190611d9d565b60ff169050610ac081600a611ea4565b609d555080156107e8576000805461ff001916905550505050565b60985460405163083d576560e41b81526001600160a01b03858116600483015260009216906383d576509060240160206040518083038186803b158015610b2157600080fd5b505afa158015610b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b599190611d80565b6097549091506001600160a01b031633148015610b8357506097546001600160a01b038581169116145b610b9f5760405162461bcd60e51b815260040161036e90611ceb565b6001600160a01b0381163014610be75760405162461bcd60e51b815260206004820152600d60248201526c0ac82aa98a8beaa9c9a82a8869609b1b604482015260640161036e565b6107e88284610f52565b6097546001600160a01b03848116911614610c1e5760405162461bcd60e51b815260040161036e90611ceb565b610c283382610f3a565b6107d78282610f52565b6033546001600160a01b03163314610c5c5760405162461bcd60e51b815260040161036e90611bea565b6001600160a01b038116610cc15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161036e565b610cca81611123565b50565b60026065541415610cf05760405162461bcd60e51b815260040161036e90611eb0565b6002606555336000818152609b6020526040902054831115610d4b5760405162461bcd60e51b8152602060048201526014602482015273125394d551919250d251539517d1115413d4d25560621b604482015260640161036e565b8115610dc35760975460405163ead5d35960e01b81526001600160a01b03868116600483015260248201869052600160448301529091169063ead5d35990606401600060405180830381600087803b158015610da657600080fd5b505af1158015610dba573d6000803e3d6000fd5b50505050610dcf565b610dcf8484600061150a565b60985460405163015304d160e21b81526001600160a01b038381166004830152306024830152604482018690529091169063054c13449060640160006040518083038186803b158015610e2157600080fd5b505afa158015610e35573d6000803e3d6000fd5b505050506001600160a01b0381166000908152609b602052604081208054859290610e61908490611d69565b90915550506040518381526001600160a01b038216907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a2610ead81611580565b609a546001600160a01b031615610f2f57609a5460975460405163a66bd52160e01b81526001600160a01b03848116600483015260248201879052918216604482015291169063a66bd52190606401600060405180830381600087803b158015610f1657600080fd5b505af1158015610f2a573d6000803e3d6000fd5b505050505b505060016065555050565b609754610621906001600160a01b0316833084611647565b60026065541415610f755760405162461bcd60e51b815260040161036e90611eb0565b600260655580610fba5760405162461bcd60e51b815260206004820152601060248201526f4445504f534954455f49535f5a45524f60801b604482015260640161036e565b6098546040516309ba9b4760e01b81526001600160a01b03848116600483015230602483015260448201849052909116906309ba9b479060640160006040518083038186803b15801561100c57600080fd5b505afa158015611020573d6000803e3d6000fd5b505050506001600160a01b0382166000908152609b60205260408120805483929061104c908490611d12565b90915550506040518181526001600160a01b038316907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a261109882611580565b609a546001600160a01b03161561111a57609a5460975460405163758e61dd60e11b81526001600160a01b03858116600483015260248201859052918216604482015291169063eb1cc3ba90606401600060405180830381600087803b15801561110157600080fd5b505af1158015611115573d6000803e3d6000fd5b505050505b50506001606555565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600260655414156111985760405162461bcd60e51b815260040161036e90611eb0565b60026065556098546001600160a01b031633146111f75760405162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f494e56414c49445f43414c4c45520000000000000000604482015260640161036e565b826001600160a01b0316846001600160a01b031614156112595760405162461bcd60e51b815260206004820152601a60248201527f4c49515549444154455f44495341424c455f594f555253454c46000000000000604482015260640161036e565b6001600160a01b0383166000908152609b602052604090205480156113d857609954604051636dd5b69d60e01b8152666c69715f66656560c81b6004820152829160009182916001600160a01b031690636dd5b69d90602401604080518083038186803b1580156112c957600080fd5b505afa1580156112dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113019190611ee7565b9150915060008111801561131d57506001600160a01b03821615155b156113575760006127106113318387611caa565b61133b9190611cc9565b90506113478185611d69565b93506113558382600161150a565b505b6113638884600161150a565b84156113d457609754604051631d20dce760e01b81526001600160a01b03808b1692631d20dce7926113a1928c92169088908c908c90600401611f15565b600060405180830381600087803b1580156113bb57600080fd5b505af11580156113cf573d6000803e3d6000fd5b505050505b5050505b6001600160a01b038085166000818152609b6020526040808220919091555190918716907fde0aa27286f5cb3a4ed853dc4823ead62d63e92cdf13de09d6aece56970721a49061142b9085815260200190565b60405180910390a361143c84611580565b609a546001600160a01b0316156114b757609a546097546040516322211d1160e21b81526001600160a01b0387811660048301529182166024820152911690638884744490604401600060405180830381600087803b15801561149e57600080fd5b505af11580156114b2573d6000803e3d6000fd5b505050505b50506001606555505050565b6114cb6116b2565b609880546001600160a01b039485166001600160a01b031991821617909155609980549385169382169390931790925560978054919093169116179055565b6001600160a01b03831630141561152057505050565b6001600160a01b0383166115695760405162461bcd60e51b815260206004820152601060248201526f7265636569707420697320656d70747960801b604482015260640161036e565b6097546107d7906001600160a01b031684846116e1565b6001600160a01b0381166000908152609b60205260409020546001901561160d5760985460405163c4c0048760e01b81526001600160a01b03848116600483015283151560248301529091169063c4c00487906044015b600060405180830381600087803b1580156115f157600080fd5b505af1158015611605573d6000803e3d6000fd5b505050505050565b6098546040516379bf27b160e01b81526001600160a01b0384811660048301528315156024830152909116906379bf27b1906044016115d7565b6040516001600160a01b03808516602483015283166044820152606481018290526107e89085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611711565b600054610100900460ff166116d95760405162461bcd60e51b815260040161036e90611f69565b6107ca6117e3565b6040516001600160a01b0383166024820152604481018290526107d790849063a9059cbb60e01b9060640161167b565b6000611766826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118139092919063ffffffff16565b8051909150156107d757808060200190518101906117849190611fb4565b6107d75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161036e565b600054610100900460ff1661180a5760405162461bcd60e51b815260040161036e90611f69565b6107ca33611123565b6060611822848460008561182a565b949350505050565b60608247101561188b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161036e565b6001600160a01b0385163b6118e25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161036e565b600080866001600160a01b031685876040516118fe9190611ffd565b60006040518083038185875af1925050503d806000811461193b576040519150601f19603f3d011682016040523d82523d6000602084013e611940565b606091505b509150915061195082828661195b565b979650505050505050565b6060831561196a5750816108f9565b82511561197a5782518084602001fd5b8160405162461bcd60e51b815260040161036e9190612019565b6001600160a01b0381168114610cca57600080fd5b6000602082840312156119bb57600080fd5b81356108f981611994565b8015158114610cca57600080fd5b600080604083850312156119e757600080fd5b8235915060208301356119f9816119c6565b809150509250929050565b60008060408385031215611a1757600080fd5b8235611a2281611994565b946020939093013593505050565b600080600060608486031215611a4557600080fd5b8335611a5081611994565b9250602084013591506040840135611a67816119c6565b809150509250925092565b60008060008060608587031215611a8857600080fd5b8435611a9381611994565b93506020850135611aa381611994565b9250604085013567ffffffffffffffff80821115611ac057600080fd5b818701915087601f830112611ad457600080fd5b813581811115611ae357600080fd5b886020828501011115611af557600080fd5b95989497505060200194505050565b60008060408385031215611b1757600080fd5b8235611b2281611994565b915060208301356119f9816119c6565b600080600060608486031215611b4757600080fd5b8335611b5281611994565b92506020840135611b6281611994565b91506040840135611a6781611994565b600080600060608486031215611b8757600080fd5b8335611b9281611994565b9250602084013591506040840135611a6781611994565b600080600060608486031215611bbe57600080fd5b8335611bc981611994565b92506020840135611bd981611994565b929592945050506040919091013590565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611c3157600080fd5b5051919050565b805161ffff81168114611c4a57600080fd5b919050565b600080600060608486031215611c6457600080fd5b8351611c6f81611994565b9250611c7d60208501611c38565b9150611c8b60408501611c38565b90509250925092565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611cc457611cc4611c94565b500290565b600082611ce657634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600d908201526c0a89e968a9cbeaa9c9a82a8869609b1b604082015260600190565b60008219821115611d2557611d25611c94565b500190565b60008083128015600160ff1b850184121615611d4857611d48611c94565b6001600160ff1b0384018313811615611d6357611d63611c94565b50500390565b600082821015611d7b57611d7b611c94565b500390565b600060208284031215611d9257600080fd5b81516108f981611994565b600060208284031215611daf57600080fd5b815160ff811681146108f957600080fd5b600181815b80851115611dfb578160001904821115611de157611de1611c94565b80851615611dee57918102915b93841c9390800290611dc5565b509250929050565b600082611e1257506001610610565b81611e1f57506000610610565b8160018114611e355760028114611e3f57611e5b565b6001915050610610565b60ff841115611e5057611e50611c94565b50506001821b610610565b5060208310610133831016604e8410600b8410161715611e7e575081810a610610565b611e888383611dc0565b8060001904821115611e9c57611e9c611c94565b029392505050565b60006108f98383611e03565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008060408385031215611efa57600080fd5b8251611f0581611994565b6020939093015192949293505050565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215611fc657600080fd5b81516108f9816119c6565b60005b83811015611fec578181015183820152602001611fd4565b838111156107e85750506000910152565b6000825161200f818460208701611fd1565b9190910192915050565b6020815260008251806020840152612038816040850160208701611fd1565b601f01601f1916919091016040019291505056fea26469706673582212205ce2e466df303ff3e5c829e7048307a8c077d6fd60b68f9088d70767905e841a64736f6c63430008090033";

type SingleFarmingVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SingleFarmingVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SingleFarmingVault__factory extends ContractFactory {
  constructor(...args: SingleFarmingVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SingleFarmingVault";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SingleFarmingVault> {
    return super.deploy(overrides || {}) as Promise<SingleFarmingVault>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SingleFarmingVault {
    return super.attach(address) as SingleFarmingVault;
  }
  connect(signer: Signer): SingleFarmingVault__factory {
    return super.connect(signer) as SingleFarmingVault__factory;
  }
  static readonly contractName: "SingleFarmingVault";
  public readonly contractName: "SingleFarmingVault";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SingleFarmingVaultInterface {
    return new utils.Interface(_abi) as SingleFarmingVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SingleFarmingVault {
    return new Contract(address, _abi, signerOrProvider) as SingleFarmingVault;
  }
}
