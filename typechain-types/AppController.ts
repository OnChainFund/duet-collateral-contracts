/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace AppController {
  export type VaultStateStruct = {
    enabled: boolean;
    enableDeposit: boolean;
    enableWithdraw: boolean;
    enableBorrow: boolean;
    enableRepay: boolean;
    enableLiquidate: boolean;
  };

  export type VaultStateStructOutput = [
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean
  ] & {
    enabled: boolean;
    enableDeposit: boolean;
    enableWithdraw: boolean;
    enableBorrow: boolean;
    enableRepay: boolean;
    enableLiquidate: boolean;
  };
}

export interface AppControllerInterface extends utils.Interface {
  contractName: "AppController";
  functions: {
    "PercentBase()": FunctionFragment;
    "allowedLiquidator(address)": FunctionFragment;
    "beforeBorrow(address,address,uint256)": FunctionFragment;
    "beforeDeposit(address,address,uint256)": FunctionFragment;
    "beforeRepay(address,address,uint256)": FunctionFragment;
    "beforeWithdraw(address,address,uint256)": FunctionFragment;
    "collateralRate()": FunctionFragment;
    "dyTokenVaults(address)": FunctionFragment;
    "dyTokens(address)": FunctionFragment;
    "emergencyWithdrawAll(address)": FunctionFragment;
    "exitVault(address,bool)": FunctionFragment;
    "getValueConf(address)": FunctionFragment;
    "getValueConfs(address,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isNeedLiquidate(address)": FunctionFragment;
    "isOpenLiquidate()": FunctionFragment;
    "joinVault(address,bool)": FunctionFragment;
    "liquidate(address,bytes)": FunctionFragment;
    "liquidateRate()": FunctionFragment;
    "maxBorrow(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCollateralRate(uint256)": FunctionFragment;
    "setDYToken(address,address)": FunctionFragment;
    "setLiquidateRate(uint256)": FunctionFragment;
    "setOpenLiquidate(bool)": FunctionFragment;
    "setOracles(address,address,uint16,uint16)": FunctionFragment;
    "setStrategy(address,address,uint256)": FunctionFragment;
    "setVault(address,address,uint256)": FunctionFragment;
    "setVaultStates(address,(bool,bool,bool,bool,bool,bool))": FunctionFragment;
    "strategies(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAllowedLiquidator(address,bool)": FunctionFragment;
    "userJoinedVaultCount(address,bool)": FunctionFragment;
    "userJoinedVaultInfoAt(address,bool,uint256)": FunctionFragment;
    "userPendingValues(address,address,int256,bool)": FunctionFragment;
    "userValues(address,bool)": FunctionFragment;
    "vaultStates(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "PercentBase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedLiquidator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeBorrow",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeDeposit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeRepay",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeWithdraw",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dyTokenVaults",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "dyTokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawAll",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "exitVault",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getValueConf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getValueConfs",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isNeedLiquidate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isOpenLiquidate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinVault",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxBorrow",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDYToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidateRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpenLiquidate",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracles",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategy",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVault",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultStates",
    values: [string, AppController.VaultStateStruct]
  ): string;
  encodeFunctionData(functionFragment: "strategies", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllowedLiquidator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "userJoinedVaultCount",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "userJoinedVaultInfoAt",
    values: [string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPendingValues",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "userValues",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "vaultStates", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "PercentBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dyTokenVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getValueConf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValueConfs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNeedLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOpenLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxBorrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDYToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidateRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOpenLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVaultStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllowedLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userJoinedVaultCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userJoinedVaultInfoAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPendingValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userValues", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultStates",
    data: BytesLike
  ): Result;

  events: {
    "AllowedLiquidatorChanged(address,bool)": EventFragment;
    "CollateralRateChanged(uint256)": EventFragment;
    "DTokenVaultChanged(address,address,address,uint256)": EventFragment;
    "LiquidateRateChanged(uint256)": EventFragment;
    "OpenLiquidateChanged(bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetVaultStates(address,tuple)": EventFragment;
    "UnderlyingDTokenChanged(address,address,address)": EventFragment;
    "UnderlyingStrategyChanged(address,address,address,uint256)": EventFragment;
    "ValueConfChanged(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowedLiquidatorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralRateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DTokenVaultChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidateRateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenLiquidateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVaultStates"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnderlyingDTokenChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnderlyingStrategyChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValueConfChanged"): EventFragment;
}

export type AllowedLiquidatorChangedEvent = TypedEvent<
  [string, boolean],
  { liquidator: string; allowed: boolean }
>;

export type AllowedLiquidatorChangedEventFilter =
  TypedEventFilter<AllowedLiquidatorChangedEvent>;

export type CollateralRateChangedEvent = TypedEvent<
  [BigNumber],
  { collateralRate: BigNumber }
>;

export type CollateralRateChangedEventFilter =
  TypedEventFilter<CollateralRateChangedEvent>;

export type DTokenVaultChangedEvent = TypedEvent<
  [string, string, string, BigNumber],
  { dToken: string; oldVault: string; newVault: string; vtype: BigNumber }
>;

export type DTokenVaultChangedEventFilter =
  TypedEventFilter<DTokenVaultChangedEvent>;

export type LiquidateRateChangedEvent = TypedEvent<
  [BigNumber],
  { liquidateRate: BigNumber }
>;

export type LiquidateRateChangedEventFilter =
  TypedEventFilter<LiquidateRateChangedEvent>;

export type OpenLiquidateChangedEvent = TypedEvent<
  [boolean],
  { open: boolean }
>;

export type OpenLiquidateChangedEventFilter =
  TypedEventFilter<OpenLiquidateChangedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SetVaultStatesEvent = TypedEvent<
  [string, AppController.VaultStateStructOutput],
  { vault: string; state: AppController.VaultStateStructOutput }
>;

export type SetVaultStatesEventFilter = TypedEventFilter<SetVaultStatesEvent>;

export type UnderlyingDTokenChangedEvent = TypedEvent<
  [string, string, string],
  { underlying: string; oldDToken: string; newDToken: string }
>;

export type UnderlyingDTokenChangedEventFilter =
  TypedEventFilter<UnderlyingDTokenChangedEvent>;

export type UnderlyingStrategyChangedEvent = TypedEvent<
  [string, string, string, BigNumber],
  { underlying: string; oldStrage: string; newDToken: string; stype: BigNumber }
>;

export type UnderlyingStrategyChangedEventFilter =
  TypedEventFilter<UnderlyingStrategyChangedEvent>;

export type ValueConfChangedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    underlying: string;
    oracle: string;
    discount: BigNumber;
    premium: BigNumber;
  }
>;

export type ValueConfChangedEventFilter =
  TypedEventFilter<ValueConfChangedEvent>;

export interface AppController extends BaseContract {
  contractName: "AppController";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AppControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PercentBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowedLiquidator(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    beforeBorrow(
      _user: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    beforeDeposit(
      arg0: string,
      _vault: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    beforeRepay(
      _repayer: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    beforeWithdraw(
      _user: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    collateralRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    dyTokenVaults(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    dyTokens(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    emergencyWithdrawAll(
      _underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitVault(
      _user: string,
      isDepositVault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getValueConf(
      _underlying: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & { oracle: string; dr: number; pr: number }
    >;

    getValueConfs(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, string, number, number] & {
        oracle0: string;
        dr0: number;
        pr0: number;
        oracle1: string;
        dr1: number;
        pr1: number;
      }
    >;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isNeedLiquidate(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOpenLiquidate(overrides?: CallOverrides): Promise<[boolean]>;

    joinVault(
      _user: string,
      isDepositVault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      _borrower: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxBorrow(
      _user: string,
      vault: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollateralRate(
      _collateralRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDYToken(
      _underlying: string,
      _dToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidateRate(
      _liquidateRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOpenLiquidate(
      _open: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracles(
      _underlying: string,
      _oracle: string,
      _discount: BigNumberish,
      _premium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrategy(
      _underlying: string,
      _strategy: string,
      stype: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVault(
      _dyToken: string,
      _vault: string,
      vtype: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVaultStates(
      _vault: string,
      _state: AppController.VaultStateStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAllowedLiquidator(
      liquidator: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userJoinedVaultCount(
      _user: string,
      isDepositVault: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userJoinedVaultInfoAt(
      _user: string,
      isDepositVault: boolean,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, AppController.VaultStateStructOutput] & {
        vault: string;
        state: AppController.VaultStateStructOutput;
      }
    >;

    userPendingValues(
      _user: string,
      _vault: string,
      _amount: BigNumberish,
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        pendingDepositValue: BigNumber;
        pendingBrorowValue: BigNumber;
      }
    >;

    userValues(
      _user: string,
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalDepositValue: BigNumber;
        totalBorrowValue: BigNumber;
      }
    >;

    vaultStates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, boolean, boolean] & {
        enabled: boolean;
        enableDeposit: boolean;
        enableWithdraw: boolean;
        enableBorrow: boolean;
        enableRepay: boolean;
        enableLiquidate: boolean;
      }
    >;
  };

  PercentBase(overrides?: CallOverrides): Promise<BigNumber>;

  allowedLiquidator(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  beforeBorrow(
    _user: string,
    _vault: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  beforeDeposit(
    arg0: string,
    _vault: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  beforeRepay(
    _repayer: string,
    _vault: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  beforeWithdraw(
    _user: string,
    _vault: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  collateralRate(overrides?: CallOverrides): Promise<BigNumber>;

  dyTokenVaults(arg0: string, overrides?: CallOverrides): Promise<string>;

  dyTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

  emergencyWithdrawAll(
    _underlying: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitVault(
    _user: string,
    isDepositVault: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getValueConf(
    _underlying: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number] & { oracle: string; dr: number; pr: number }
  >;

  getValueConfs(
    token0: string,
    token1: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, string, number, number] & {
      oracle0: string;
      dr0: number;
      pr0: number;
      oracle1: string;
      dr1: number;
      pr1: number;
    }
  >;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isNeedLiquidate(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOpenLiquidate(overrides?: CallOverrides): Promise<boolean>;

  joinVault(
    _user: string,
    isDepositVault: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    _borrower: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateRate(overrides?: CallOverrides): Promise<BigNumber>;

  maxBorrow(
    _user: string,
    vault: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollateralRate(
    _collateralRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDYToken(
    _underlying: string,
    _dToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidateRate(
    _liquidateRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOpenLiquidate(
    _open: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracles(
    _underlying: string,
    _oracle: string,
    _discount: BigNumberish,
    _premium: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrategy(
    _underlying: string,
    _strategy: string,
    stype: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVault(
    _dyToken: string,
    _vault: string,
    vtype: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVaultStates(
    _vault: string,
    _state: AppController.VaultStateStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategies(arg0: string, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAllowedLiquidator(
    liquidator: string,
    allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userJoinedVaultCount(
    _user: string,
    isDepositVault: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userJoinedVaultInfoAt(
    _user: string,
    isDepositVault: boolean,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, AppController.VaultStateStructOutput] & {
      vault: string;
      state: AppController.VaultStateStructOutput;
    }
  >;

  userPendingValues(
    _user: string,
    _vault: string,
    _amount: BigNumberish,
    _dp: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      pendingDepositValue: BigNumber;
      pendingBrorowValue: BigNumber;
    }
  >;

  userValues(
    _user: string,
    _dp: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalDepositValue: BigNumber;
      totalBorrowValue: BigNumber;
    }
  >;

  vaultStates(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, boolean, boolean, boolean] & {
      enabled: boolean;
      enableDeposit: boolean;
      enableWithdraw: boolean;
      enableBorrow: boolean;
      enableRepay: boolean;
      enableLiquidate: boolean;
    }
  >;

  callStatic: {
    PercentBase(overrides?: CallOverrides): Promise<BigNumber>;

    allowedLiquidator(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    beforeBorrow(
      _user: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeDeposit(
      arg0: string,
      _vault: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeRepay(
      _repayer: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeWithdraw(
      _user: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralRate(overrides?: CallOverrides): Promise<BigNumber>;

    dyTokenVaults(arg0: string, overrides?: CallOverrides): Promise<string>;

    dyTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

    emergencyWithdrawAll(
      _underlying: string,
      overrides?: CallOverrides
    ): Promise<void>;

    exitVault(
      _user: string,
      isDepositVault: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getValueConf(
      _underlying: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number] & { oracle: string; dr: number; pr: number }
    >;

    getValueConfs(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, string, number, number] & {
        oracle0: string;
        dr0: number;
        pr0: number;
        oracle1: string;
        dr1: number;
        pr1: number;
      }
    >;

    initialize(overrides?: CallOverrides): Promise<void>;

    isNeedLiquidate(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOpenLiquidate(overrides?: CallOverrides): Promise<boolean>;

    joinVault(
      _user: string,
      isDepositVault: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(
      _borrower: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxBorrow(
      _user: string,
      vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCollateralRate(
      _collateralRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDYToken(
      _underlying: string,
      _dToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidateRate(
      _liquidateRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOpenLiquidate(_open: boolean, overrides?: CallOverrides): Promise<void>;

    setOracles(
      _underlying: string,
      _oracle: string,
      _discount: BigNumberish,
      _premium: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategy(
      _underlying: string,
      _strategy: string,
      stype: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVault(
      _dyToken: string,
      _vault: string,
      vtype: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultStates(
      _vault: string,
      _state: AppController.VaultStateStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAllowedLiquidator(
      liquidator: string,
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    userJoinedVaultCount(
      _user: string,
      isDepositVault: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userJoinedVaultInfoAt(
      _user: string,
      isDepositVault: boolean,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, AppController.VaultStateStructOutput] & {
        vault: string;
        state: AppController.VaultStateStructOutput;
      }
    >;

    userPendingValues(
      _user: string,
      _vault: string,
      _amount: BigNumberish,
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        pendingDepositValue: BigNumber;
        pendingBrorowValue: BigNumber;
      }
    >;

    userValues(
      _user: string,
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalDepositValue: BigNumber;
        totalBorrowValue: BigNumber;
      }
    >;

    vaultStates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, boolean, boolean] & {
        enabled: boolean;
        enableDeposit: boolean;
        enableWithdraw: boolean;
        enableBorrow: boolean;
        enableRepay: boolean;
        enableLiquidate: boolean;
      }
    >;
  };

  filters: {
    "AllowedLiquidatorChanged(address,bool)"(
      liquidator?: null,
      allowed?: null
    ): AllowedLiquidatorChangedEventFilter;
    AllowedLiquidatorChanged(
      liquidator?: null,
      allowed?: null
    ): AllowedLiquidatorChangedEventFilter;

    "CollateralRateChanged(uint256)"(
      collateralRate?: null
    ): CollateralRateChangedEventFilter;
    CollateralRateChanged(
      collateralRate?: null
    ): CollateralRateChangedEventFilter;

    "DTokenVaultChanged(address,address,address,uint256)"(
      dToken?: string | null,
      oldVault?: null,
      newVault?: null,
      vtype?: null
    ): DTokenVaultChangedEventFilter;
    DTokenVaultChanged(
      dToken?: string | null,
      oldVault?: null,
      newVault?: null,
      vtype?: null
    ): DTokenVaultChangedEventFilter;

    "LiquidateRateChanged(uint256)"(
      liquidateRate?: null
    ): LiquidateRateChangedEventFilter;
    LiquidateRateChanged(liquidateRate?: null): LiquidateRateChangedEventFilter;

    "OpenLiquidateChanged(bool)"(open?: null): OpenLiquidateChangedEventFilter;
    OpenLiquidateChanged(open?: null): OpenLiquidateChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SetVaultStates(address,tuple)"(
      vault?: null,
      state?: null
    ): SetVaultStatesEventFilter;
    SetVaultStates(vault?: null, state?: null): SetVaultStatesEventFilter;

    "UnderlyingDTokenChanged(address,address,address)"(
      underlying?: string | null,
      oldDToken?: null,
      newDToken?: null
    ): UnderlyingDTokenChangedEventFilter;
    UnderlyingDTokenChanged(
      underlying?: string | null,
      oldDToken?: null,
      newDToken?: null
    ): UnderlyingDTokenChangedEventFilter;

    "UnderlyingStrategyChanged(address,address,address,uint256)"(
      underlying?: string | null,
      oldStrage?: null,
      newDToken?: null,
      stype?: null
    ): UnderlyingStrategyChangedEventFilter;
    UnderlyingStrategyChanged(
      underlying?: string | null,
      oldStrage?: null,
      newDToken?: null,
      stype?: null
    ): UnderlyingStrategyChangedEventFilter;

    "ValueConfChanged(address,address,uint256,uint256)"(
      underlying?: string | null,
      oracle?: null,
      discount?: null,
      premium?: null
    ): ValueConfChangedEventFilter;
    ValueConfChanged(
      underlying?: string | null,
      oracle?: null,
      discount?: null,
      premium?: null
    ): ValueConfChangedEventFilter;
  };

  estimateGas: {
    PercentBase(overrides?: CallOverrides): Promise<BigNumber>;

    allowedLiquidator(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeBorrow(
      _user: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeDeposit(
      arg0: string,
      _vault: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeRepay(
      _repayer: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beforeWithdraw(
      _user: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralRate(overrides?: CallOverrides): Promise<BigNumber>;

    dyTokenVaults(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    dyTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdrawAll(
      _underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitVault(
      _user: string,
      isDepositVault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getValueConf(
      _underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueConfs(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isNeedLiquidate(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOpenLiquidate(overrides?: CallOverrides): Promise<BigNumber>;

    joinVault(
      _user: string,
      isDepositVault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(
      _borrower: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxBorrow(
      _user: string,
      vault: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollateralRate(
      _collateralRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDYToken(
      _underlying: string,
      _dToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidateRate(
      _liquidateRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOpenLiquidate(
      _open: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracles(
      _underlying: string,
      _oracle: string,
      _discount: BigNumberish,
      _premium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrategy(
      _underlying: string,
      _strategy: string,
      stype: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVault(
      _dyToken: string,
      _vault: string,
      vtype: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVaultStates(
      _vault: string,
      _state: AppController.VaultStateStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAllowedLiquidator(
      liquidator: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userJoinedVaultCount(
      _user: string,
      isDepositVault: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userJoinedVaultInfoAt(
      _user: string,
      isDepositVault: boolean,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPendingValues(
      _user: string,
      _vault: string,
      _amount: BigNumberish,
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userValues(
      _user: string,
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultStates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    PercentBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedLiquidator(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeBorrow(
      _user: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeDeposit(
      arg0: string,
      _vault: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeRepay(
      _repayer: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beforeWithdraw(
      _user: string,
      _vault: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dyTokenVaults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dyTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawAll(
      _underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitVault(
      _user: string,
      isDepositVault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getValueConf(
      _underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValueConfs(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isNeedLiquidate(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOpenLiquidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joinVault(
      _user: string,
      isDepositVault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      _borrower: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxBorrow(
      _user: string,
      vault: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralRate(
      _collateralRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDYToken(
      _underlying: string,
      _dToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidateRate(
      _liquidateRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOpenLiquidate(
      _open: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracles(
      _underlying: string,
      _oracle: string,
      _discount: BigNumberish,
      _premium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrategy(
      _underlying: string,
      _strategy: string,
      stype: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVault(
      _dyToken: string,
      _vault: string,
      vtype: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVaultStates(
      _vault: string,
      _state: AppController.VaultStateStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAllowedLiquidator(
      liquidator: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userJoinedVaultCount(
      _user: string,
      isDepositVault: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userJoinedVaultInfoAt(
      _user: string,
      isDepositVault: boolean,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userPendingValues(
      _user: string,
      _vault: string,
      _amount: BigNumberish,
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userValues(
      _user: string,
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultStates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
