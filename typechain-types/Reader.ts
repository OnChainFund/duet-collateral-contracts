/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ReaderInterface extends utils.Interface {
  contractName: "Reader";
  functions: {
    "PercentBase()": FunctionFragment;
    "depositVaultValues(address[],bool)": FunctionFragment;
    "getVaultPrice(address,uint256,bool)": FunctionFragment;
    "pendingBorrow(uint256)": FunctionFragment;
    "pendingRepay(address,address,uint256)": FunctionFragment;
    "userVaultBorrowAmounts(address,address[])": FunctionFragment;
    "userVaultDepositAmounts(address,address[])": FunctionFragment;
    "userVaultValues(address,address[],bool)": FunctionFragment;
    "usersVaules(address[],bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "PercentBase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositVaultValues",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultPrice",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingBorrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRepay",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userVaultBorrowAmounts",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "userVaultDepositAmounts",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "userVaultValues",
    values: [string, string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "usersVaules",
    values: [string[], boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "PercentBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositVaultValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userVaultBorrowAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userVaultDepositAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userVaultValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usersVaules",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Reader extends BaseContract {
  contractName: "Reader";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReaderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PercentBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositVaultValues(
      _vaults: string[],
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & { amounts: BigNumber[]; values: BigNumber[] }
    >;

    getVaultPrice(
      vault: string,
      underlyingAmount: BigNumberish,
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    pendingBorrow(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { actualBorrow: BigNumber; fee: BigNumber }
    >;

    pendingRepay(
      borrower: string,
      vault: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { actualRepay: BigNumber; fee: BigNumber }
    >;

    userVaultBorrowAmounts(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;

    userVaultDepositAmounts(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        amounts: BigNumber[];
        underAmounts: BigNumber[];
      }
    >;

    userVaultValues(
      _user: string,
      _vaults: string[],
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { values: BigNumber[] }>;

    usersVaules(
      users: string[],
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        totalDeposits: BigNumber[];
        totalBorrows: BigNumber[];
      }
    >;
  };

  PercentBase(overrides?: CallOverrides): Promise<BigNumber>;

  depositVaultValues(
    _vaults: string[],
    _dp: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & { amounts: BigNumber[]; values: BigNumber[] }
  >;

  getVaultPrice(
    vault: string,
    underlyingAmount: BigNumberish,
    _dp: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingBorrow(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { actualBorrow: BigNumber; fee: BigNumber }
  >;

  pendingRepay(
    borrower: string,
    vault: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { actualRepay: BigNumber; fee: BigNumber }
  >;

  userVaultBorrowAmounts(
    _user: string,
    _vaults: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  userVaultDepositAmounts(
    _user: string,
    _vaults: string[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & {
      amounts: BigNumber[];
      underAmounts: BigNumber[];
    }
  >;

  userVaultValues(
    _user: string,
    _vaults: string[],
    _dp: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  usersVaules(
    users: string[],
    dp: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & {
      totalDeposits: BigNumber[];
      totalBorrows: BigNumber[];
    }
  >;

  callStatic: {
    PercentBase(overrides?: CallOverrides): Promise<BigNumber>;

    depositVaultValues(
      _vaults: string[],
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & { amounts: BigNumber[]; values: BigNumber[] }
    >;

    getVaultPrice(
      vault: string,
      underlyingAmount: BigNumberish,
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingBorrow(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { actualBorrow: BigNumber; fee: BigNumber }
    >;

    pendingRepay(
      borrower: string,
      vault: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { actualRepay: BigNumber; fee: BigNumber }
    >;

    userVaultBorrowAmounts(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    userVaultDepositAmounts(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        amounts: BigNumber[];
        underAmounts: BigNumber[];
      }
    >;

    userVaultValues(
      _user: string,
      _vaults: string[],
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    usersVaules(
      users: string[],
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        totalDeposits: BigNumber[];
        totalBorrows: BigNumber[];
      }
    >;
  };

  filters: {};

  estimateGas: {
    PercentBase(overrides?: CallOverrides): Promise<BigNumber>;

    depositVaultValues(
      _vaults: string[],
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultPrice(
      vault: string,
      underlyingAmount: BigNumberish,
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingBorrow(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingRepay(
      borrower: string,
      vault: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userVaultBorrowAmounts(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userVaultDepositAmounts(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userVaultValues(
      _user: string,
      _vaults: string[],
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usersVaules(
      users: string[],
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PercentBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositVaultValues(
      _vaults: string[],
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultPrice(
      vault: string,
      underlyingAmount: BigNumberish,
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingBorrow(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingRepay(
      borrower: string,
      vault: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userVaultBorrowAmounts(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userVaultDepositAmounts(
      _user: string,
      _vaults: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userVaultValues(
      _user: string,
      _vaults: string[],
      _dp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usersVaules(
      users: string[],
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
