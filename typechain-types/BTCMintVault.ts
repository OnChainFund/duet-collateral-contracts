/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BTCMintVaultInterface extends utils.Interface {
  contractName: "BTCMintVault";
  functions: {
    "PercentBase()": FunctionFragment;
    "borrow(uint256)": FunctionFragment;
    "borrows(address)": FunctionFragment;
    "controller()": FunctionFragment;
    "feeConf()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "isDuetVault()": FunctionFragment;
    "liquidate(address,address,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingValue(address,int256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "repayTo(address,uint256)": FunctionFragment;
    "setAppController(address)": FunctionFragment;
    "setFeeConf(address)": FunctionFragment;
    "tokensReceived(address,uint256,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "underlying()": FunctionFragment;
    "underlyingAmountValue(uint256,bool)": FunctionFragment;
    "userValue(address,bool)": FunctionFragment;
    "valueToAmount(uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "PercentBase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "borrows", values: [string]): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeConf", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isDuetVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingValue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "repay", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "repayTo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAppController",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setFeeConf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAmountValue",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "userValue",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "valueToAmount",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "PercentBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrows", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeConf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDuetVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAppController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeConf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAmountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "valueToAmount",
    data: BytesLike
  ): Result;

  events: {
    "Borrow(address,uint256)": EventFragment;
    "ControllerChanged(address)": EventFragment;
    "FeeConfChanged(address)": EventFragment;
    "Liquidated(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Repay(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeConfChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
}

export type BorrowEvent = TypedEvent<
  [string, BigNumber],
  { borrower: string; amount: BigNumber }
>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export type ControllerChangedEvent = TypedEvent<
  [string],
  { controller: string }
>;

export type ControllerChangedEventFilter =
  TypedEventFilter<ControllerChangedEvent>;

export type FeeConfChangedEvent = TypedEvent<[string], { feeconf: string }>;

export type FeeConfChangedEventFilter = TypedEventFilter<FeeConfChangedEvent>;

export type LiquidatedEvent = TypedEvent<
  [string, string, BigNumber],
  { liquidator: string; borrower: string; borrows: BigNumber }
>;

export type LiquidatedEventFilter = TypedEventFilter<LiquidatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RepayEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { repayer: string; amount: BigNumber; leftBorrows: BigNumber }
>;

export type RepayEventFilter = TypedEventFilter<RepayEvent>;

export interface BTCMintVault extends BaseContract {
  contractName: "BTCMintVault";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BTCMintVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PercentBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrow(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrows(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    feeConf(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _controller: string,
      _feeConf: string,
      _underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isDuetVault(overrides?: CallOverrides): Promise<[boolean]>;

    liquidate(
      liquidator: string,
      borrower: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingValue(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayTo(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAppController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeConf(
      _feeConf: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokensReceived(
      from: string,
      amount: BigNumberish,
      exData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    underlyingAmountValue(
      amount: BigNumberish,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    userValue(
      user: string,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    valueToAmount(
      value: BigNumberish,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;
  };

  PercentBase(overrides?: CallOverrides): Promise<BigNumber>;

  borrow(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrows(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  feeConf(overrides?: CallOverrides): Promise<string>;

  initialize(
    _controller: string,
    _feeConf: string,
    _underlying: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isDuetVault(overrides?: CallOverrides): Promise<boolean>;

  liquidate(
    liquidator: string,
    borrower: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingValue(
    user: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayTo(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAppController(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeConf(
    _feeConf: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokensReceived(
    from: string,
    amount: BigNumberish,
    exData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  underlyingAmountValue(
    amount: BigNumberish,
    dp: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userValue(
    user: string,
    dp: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  valueToAmount(
    value: BigNumberish,
    dp: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    PercentBase(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    borrows(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    feeConf(overrides?: CallOverrides): Promise<string>;

    initialize(
      _controller: string,
      _feeConf: string,
      _underlying: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isDuetVault(overrides?: CallOverrides): Promise<boolean>;

    liquidate(
      liquidator: string,
      borrower: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingValue(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repay(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    repayTo(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAppController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeConf(_feeConf: string, overrides?: CallOverrides): Promise<void>;

    tokensReceived(
      from: string,
      amount: BigNumberish,
      exData: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    underlying(overrides?: CallOverrides): Promise<string>;

    underlyingAmountValue(
      amount: BigNumberish,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userValue(
      user: string,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueToAmount(
      value: BigNumberish,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Borrow(address,uint256)"(
      borrower?: string | null,
      amount?: null
    ): BorrowEventFilter;
    Borrow(borrower?: string | null, amount?: null): BorrowEventFilter;

    "ControllerChanged(address)"(
      controller?: null
    ): ControllerChangedEventFilter;
    ControllerChanged(controller?: null): ControllerChangedEventFilter;

    "FeeConfChanged(address)"(feeconf?: null): FeeConfChangedEventFilter;
    FeeConfChanged(feeconf?: null): FeeConfChangedEventFilter;

    "Liquidated(address,address,uint256)"(
      liquidator?: string | null,
      borrower?: string | null,
      borrows?: null
    ): LiquidatedEventFilter;
    Liquidated(
      liquidator?: string | null,
      borrower?: string | null,
      borrows?: null
    ): LiquidatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Repay(address,uint256,uint256)"(
      repayer?: string | null,
      amount?: null,
      leftBorrows?: null
    ): RepayEventFilter;
    Repay(
      repayer?: string | null,
      amount?: null,
      leftBorrows?: null
    ): RepayEventFilter;
  };

  estimateGas: {
    PercentBase(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrows(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    feeConf(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _controller: string,
      _feeConf: string,
      _underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isDuetVault(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      liquidator: string,
      borrower: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingValue(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayTo(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAppController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeConf(
      _feeConf: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokensReceived(
      from: string,
      amount: BigNumberish,
      exData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingAmountValue(
      amount: BigNumberish,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userValue(
      user: string,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    valueToAmount(
      value: BigNumberish,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PercentBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrows(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeConf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _controller: string,
      _feeConf: string,
      _underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isDuetVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      liquidator: string,
      borrower: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingValue(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayTo(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAppController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeConf(
      _feeConf: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokensReceived(
      from: string,
      amount: BigNumberish,
      exData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingAmountValue(
      amount: BigNumberish,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userValue(
      user: string,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueToAmount(
      value: BigNumberish,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
