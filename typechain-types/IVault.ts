/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IVaultInterface extends utils.Interface {
  contractName: "IVault";
  functions: {
    "isDuetVault()": FunctionFragment;
    "liquidate(address,address,bytes)": FunctionFragment;
    "pendingValue(address,int256)": FunctionFragment;
    "underlying()": FunctionFragment;
    "underlyingAmountValue(uint256,bool)": FunctionFragment;
    "userValue(address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "isDuetVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingValue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAmountValue",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "userValue",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "isDuetVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAmountValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userValue", data: BytesLike): Result;

  events: {};
}

export interface IVault extends BaseContract {
  contractName: "IVault";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isDuetVault(overrides?: CallOverrides): Promise<[boolean]>;

    liquidate(
      liquidator: string,
      borrower: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingValue(
      user: string,
      pending: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    underlyingAmountValue(
      amount: BigNumberish,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    userValue(
      user: string,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  isDuetVault(overrides?: CallOverrides): Promise<boolean>;

  liquidate(
    liquidator: string,
    borrower: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingValue(
    user: string,
    pending: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  underlying(overrides?: CallOverrides): Promise<string>;

  underlyingAmountValue(
    amount: BigNumberish,
    dp: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userValue(
    user: string,
    dp: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    isDuetVault(overrides?: CallOverrides): Promise<boolean>;

    liquidate(
      liquidator: string,
      borrower: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingValue(
      user: string,
      pending: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<string>;

    underlyingAmountValue(
      amount: BigNumberish,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userValue(
      user: string,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    isDuetVault(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      liquidator: string,
      borrower: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingValue(
      user: string,
      pending: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingAmountValue(
      amount: BigNumberish,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userValue(
      user: string,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isDuetVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidate(
      liquidator: string,
      borrower: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingValue(
      user: string,
      pending: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingAmountValue(
      amount: BigNumberish,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userValue(
      user: string,
      dp: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
